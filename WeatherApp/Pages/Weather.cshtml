@page
@model WeatherApp.Pages.WeatherModel
@{
    ViewData["Title"] = "Weather";
}

<h1>Weather Forecast</h1>

<form method="post">
    <div class="weather-form">
        <label for="city">Enter City:</label>
        <input id="city" name="City" value="@Model.City" />
        <button type="submit">Get Weather</button>
    </div>

    @if (Model.Weather is not null)
    {
        <div class="weather-container">

            <div class="today text-center mb-4">
                <div class="today-header">
                    <h2>@Model.City</h2>
                    <p>@DateTime.Now.ToString("dddd, dd MMMM yyyy")</p>
                </div>
                <div class="today-content">
                    <i class="@GetWeatherIconClass(Model.WeatherResults[0].WeatherCondition)" style="font-size: 48px;"></i>
                    <div>
                        <p><strong>Temperature:</strong> @Model.WeatherResults[0].Temperature °C</p>
                        <p><strong>Humidity:</strong> @Model.WeatherResults[0].Humidity %</p>
                        <p><strong>Condition:</strong> @Model.WeatherResults[0].WeatherCondition</p>
                    </div>
                </div>
            </div>

            
            <div class="row justify-content-start">
                @for (int i = 1; i < Model.WeatherResults.Length; i++)
                {
                    <div class="col-6 col-md-2 mb-4">
                        <div class="weather-card h-100">
                            
                            <i class="@GetWeatherIconClass(Model.WeatherResults[i].WeatherCondition)" style="font-size: 48px;"></i>
                            <h4>@Model.WeatherResults[i].Time.ToString("dddd")</h4>
                            <p><strong>Max Temp:</strong> @Model.WeatherResults[i].TemperatureMax °C</p>
                            <p><strong>Min Temp:</strong> @Model.WeatherResults[i].TemperatureMin °C</p>
                            <p><strong>Condition:</strong> @Model.WeatherResults[i].WeatherCondition</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else if (ViewData["ErrorMessage"] is not null)
    {
        <p class="error-message">@ViewData["ErrorMessage"]</p>
    }
</form>

<style>
    :root {
        --primary-color: #4caf50;
        --text-light: #fff;
        --text-dark: #333;
    }

    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f0f8ff;
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
        color: var(--primary-color);
    }

    .weather-form {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

        .weather-form input {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 200px;
        }

        .weather-form button {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
        }

            .weather-form button:hover {
                background-color: #45a049;
                transform: scale(1.05);
            }

    .weather-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .today {
        text-align: center;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 50px;
        background-color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        height: 300px;
        max-width: 300px;
        margin-bottom: 20px;
    }

    .today-header h2 {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .today-content img {
        max-width: 100px;
        margin-bottom: 10px;
    }

    .weather-card {
        padding: 15px;
        border-radius: 10px;
        overflow: hidden;
        background-color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .weather-card h4 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .weather-card p {
            margin: 5px 0;
            font-size: 14px;
        }

    .weather-row {
        display: flex;
        justify-content: flex-start;
        gap: 10px;
        flex-wrap: wrap;
    }

    .weather-card img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-bottom: 10px;
    }

    .error-message {
        color: red;
        text-align: center;
        margin-top: 20px;
    }
</style>

@functions {
    private string GetWeatherIconClass(string weatherCondition)
    {
        return weatherCondition.ToLower()
        switch
        {
            "clear sky" => "bi bi-sun",
            "mainly clear" => "bi bi-sun",
            "partly cloudy" => "bi bi-cloud-sun",
            "overcast" => "bi bi-cloud",
            "fog" => "bi bi-cloud-fog",
            "depositing rime fog" => "bi bi-cloud-fog",
            "drizzle: light intensity" => "bi bi-cloud-drizzle",
            "drizzle: moderate intensity" => "bi bi-cloud-drizzle",
            "drizzle: dense intensity" => "bi bi-cloud-drizzle",
            "freezing drizzle: light intensity" => "bi bi-cloud-drizzle",
            "freezing drizzle: dense intensity" => "bi bi-cloud-drizzle",
            "rain: slight intensity" => "bi bi-cloud-rain",
            "rain: moderate intensity" => "bi bi-cloud-rain",
            "rain: heavy intensity" => "bi bi-cloud-rain",
            "freezing rain: light intensity" => "bi bi-cloud-rain",
            "freezing rain: heavy intensity" => "bi bi-cloud-rain",
            "snow fall: slight intensity" => "bi bi-cloud-snow",
            "snow fall: moderate intensity" => "bi bi-cloud-snow",
            "snow fall: heavy intensity" => "bi bi-cloud-snow",
            "snow grains" => "bi bi-cloud-snow",
            "rain showers: slight intensity" => "bi bi-cloud-showers",
            "rain showers: moderate intensity" => "bi bi-cloud-showers",
            "rain showers: violent intensity" => "bi bi-cloud-showers",
            "snow showers: slight intensity" => "bi bi-cloud-snow",
            "snow showers: heavy intensity" => "bi bi-cloud-snow",
            "thunderstorm: slight or moderate" => "bi bi-cloud-lightning",
            "thunderstorm with slight hail" => "bi bi-cloud-lightning",
            "thunderstorm with heavy hail" => "bi bi-cloud-lightning",
            _ => "bi bi-question-circle"
        };
    }
}
